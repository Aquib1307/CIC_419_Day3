Linux Commands
Day3 Terminal Cmds - Practice Problems

1. Get user infor from /etc/passwd and change ownership of user's home directory 
cat /etc/passwd 
1a) ls -l /etc/passwd
1b) awk < /etc/passwd -F: '{ print $1 }'
1c) awk -F ':' '$3>=1000 {print "User ID:"$1","$3}'
1d) awk -F":" '{print $6}' /etc/passwd | sort
1e) echo $HOME or ls -l /home

2. Move files from one folder to the respective folders 
2a) cat > abc.txt 
    cat > def.txt 
    cat > ghi.txt
    cat > jkl.txt
2b) echo *.txt

2c) fullfilename="/E/BL419/Day3/abc.txt"
filename=$(basename "$fullfilename")
fname="${filename%.*}"
ext="${filename##*.}"
echo $fname
echo $ext

2d) mkdir abc
    mkdir def
    mkdir ghi
    mkdir jkl

2e) mv abc.txt abc
    mv def.txt def
    mv ghi.txt ghi
    mv jkl.txt jkl

3. Append current date to all log files name which has extension .log.1 from a folder
3a) mkdir abc.log.1
    mkdir def.log.1
    mkdir ghi.log.1
    mkdir jkl.log.1
    mkdir mno.log.1
3b) echo *.log.1

3c) fullfilename="/E/BL419/Day3/abc.log.1"
filename=$(basename "$fullfilename")
fname="${filename%.*}"
ext="${filename##*.}"
echo $fname
echo $ext

3d) date | awk '{print $3 " " $2 " " $6 " " }'
3e) echo abc-"`date +"%d%m%Y"`".log

4. Archive the files from /var/log folder which have modifified 7 days ago & move it to your backup folder
4a) find $DIR -mtime -7 -type f
4b) mv * backupfolder

5. Check if a folder exists or not. If it's not present, create it
5a) test -d "Day3" && echo "Found/Exists" || echo "Does not exist"
5b) dir = "foo"
if [ -d $dir ]
then
    echo "Directory already exists"
else
    mkdir $dir
fi

6. Execute command "hello" & "ls" & check it's execution status & print whether command executed successful or not
6a) hello
6b) Execution status of hello command = bash: hello: command not found - 
6c) ls
6d) Execution status of hello command = Executed successfully & it shows list of files & directories

7. Create process list table displays process id, parent process id, command name, % of memory consumption, %cpu utilization
watch -n 1 'ps -eo pid,ppid,cmd,%mem,%cpu --sort=-%cpu | head'

8.Data Analysis / Manipulation AWK
i) cat data.csv | awk '$4>100000 {print $2 " " $7}'
a) cat data.csv | awk '$4>100000'
b) cat data.csv | awk '{print $2 " " $7}'

ii) grep -i captain data.csv | awk '{sum+=$7} END {print sum/NR}'
a) grep -i captain data.csv
b) cat data.csv | awk '{sum+=$7} END {print sum}'

iii a & b) cat data.csv | awk '$5>=7000 && $5<=10000 {print $3 " " $5}'

iv a & b) cat data.csv | awk '{sum+=$4} END {print sum/NR}'

9. Print last 4 frequently access urls count in sorted order from access.log
i) cat access.log
ii) grep -oP '^[^"]+"[^"\\]*(?:\\.[^"\\]*)*"[^"]+"\K[^"\\]*(?:\\.[^"\\]*)*(?=")' access.log
iii) sort access.log | uniq -c & sort access.log | uniq -c | wc -l
iv) grep -oP '(?<=http://).*(?=;)' access.log | sort -u | head -4

10. Print list of last 4 frequently access unique url at particular hours from access.log
i) cat access.log | awk '{print $7}' | sort -n | uniq -c
ii) sort access.log | uniq -c & sort access.log | uniq -c | wc -l
iii) grep -oP '(?<=http://).*(?=;)' access.log | sort -u | head -4

11. Print list of web response code count in the unique sorted order at specific hours 
i) cat access.log | cut -d '"' -f3 | cut -d ' ' -f2 | sort | uniq -c | sort -rn
ii) sort access.log | cut -d '"' -f3 | cut -d ' ' -f2 | sort | uniq -c | wc -l
iii) awk -F ',' '{print $2}' access.log | sort | uniq -c | head -4

12. Print list of last 10 unique sorted client IP from access.log
i) cat access.* | awk '{ print $1 }' | sort | uniq -c | sort -n
ii) awk '{ print $1 } ' access.log | sort | uniq | wc -l
iii) cat access.* | awk '{ print $1 }' | sort | uniq -c | sort -n | head -4

13. Find a word "system" from all log files in the folder /var/log and print number of occurrence more than 0 against each file 
grep system access.log

14. Set environment usersecret="dH34xJaa23" if its already not set
i) if [ -z "$var" ]
then
      echo "\$var is empty"
else
      echo "\$var is NOT empty"
fi

ii) #!/bin/bash

getent usersecret $1 > /dev/null 2&>1

if [ $? -eq 0 ]; then
    echo "yes the user exists"
else
    echo "No, the user does not exist"
fi

iii) export NAME=VALUE
export HOME=usersecret
echo $HOME

15. Find the difference between original file & the updated file. Apply changes to the original file
i) mkdir original
   mkdir updated
ii) cp original-file.sh original file
    cp updated-file.sh updated file
iii) diff -q original file/ updated file/
iv) cp original file original-backup
v)  diff -q original-backup/ updated file/